#! /bin/bash
export ABPF=/usr
export ABLE=$ABPF/lib/autobuild
export ARCH=i386
export MTER="Eastern Heart <zxd123314@hotmail.com>"

# programs

if [ "x$PYTHON" = "x" ]
then
	export PYTHON=python
fi

if [ -e $ABLE/functions ]
then
	. $ABLE/functions
else
	# default defines
	dpkg_getver(){
#		dpkg -l $1 | grep ^ii | cut -c 5- | cut -d " " -f 1
		COLUMNS=1 dpkg -l $1 | grep ^ii | cut -c 20- | cut -d " " -f 1
	}
	detect_type(){
		if [ -e autobuild/build ]
                then
                        echo "self"
		elif [ -e configure ]
		then
			echo "autotools"
		elif [ -e CMakeLists.txt ]
		then
			echo "cmake"
		elif [ -e autobuild/build ]
		then
			echo "self"
                elif [ -e SConstruct ]
                then
                        echo "scons"
                elif [ -e setup.py ]
                then
                        echo "python"
		else
			echo "unsupported"
		fi
	}
	autobuild_autotools(){
		SRCDIR=`pwd`
		if [ "x$ABSHADOW" = "x" ] 
		then
			mkdir -p build &&
			cd build
		else 
			true
		fi && 
		$SRCDIR/configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --libexecdir=/usr/lib/$PKGNAME $AUTOTOOLS_AFTER && 
		make $ABMK $MAKE_AFTER && 
		make DESTDIR=$SRCDIR/abdist $MAKE_AFTER install && 
		if [ "x$ABSHADOW" = "x" ] 
		then 
			cd ..
		else
			true
		fi
	}
	autobuild_cmake(){
                mkdir -p build && 
		cd build && 
		cmake .. -DCMAKE_INSTALL_PREFIX=/usr $CMAKE_AFTER && 
		make $ABMK $MAKE_AFTER && 
		make DESTDIR=`pwd`/../abdist $MAKE_AFTER install && 
		cd ..
        }
	autobuild_self(){
		bash `pwd`/autobuild/build
	}
	autobuild_scons(){
		scons --prefix=/usr --install-sandbox=`pwd`/abdist install
	}
	autobuild_python(){
		$PYTHON setup.py bdist &&
		cd dist &&
		tar xvf *.tar.* &&
		rm *.tar.* &&
		cd .. &&
		mv dist abdist
	}
	gendep(){
		FIRST=1
		for i in $PKGDEP
		do
			[ "$FIRST" != "1" ] && printf ", "
			[ "$FIRST" = "1" ] && FIRST=0
			printf "$i (>= `dpkg_getver $i`)"
		done
	}
	gen_control(){
		mkdir -p abdist/DEBIAN && 
		echo "Package: $PKGNAME" > abdist/DEBIAN/control && 
		echo "Version: $PKGVER" >> abdist/DEBIAN/control && 
		echo "Architecture: $ARCH" >> abdist/DEBIAN/control && 
		( ( [ "x$PKGSEC" != "x" ] && echo "Section: $PKGSEC" >> abdist/DEBIAN/control ) || true ) && 
		echo "Maintainer: $MTER" >> abdist/DEBIAN/control &&
		echo "Installed-Size: `du -s abdist | cut -f 1`" >> abdist/DEBIAN/control && 
		echo "Description: $PKGDES" >> abdist/DEBIAN/control && 
		echo "Depends: `gendep`" >> abdist/DEBIAN/control
	}
fi

if [ ! -d autobuild ]
then
	echo No autobuild directory ^o^
	exit 1
fi

if [ -e autobuild/defines ]
then
	. autobuild/defines
else
	echo "No autobuild/defines :-("
	exit 1
fi

if [ "x$ABTYPE" = "x" ]
then
	export ABTYPE="`detect_type`"
fi

if autobuild_$ABTYPE
then
	:
else
	echo "Build failed..."
	exit 1
fi

if [ ! -d abdist ]
then
	echo No abdist ^o^
	exit 1
fi

if [ -d autobuild/override ]
then
	cp -r --preserve=all autobuild/override/* abdist
fi

# Begin plugins

# remove dir

rm -f abdist/usr/share/info/dir
rm -f abdist/usr/info/dir

# End plugins

if [ ! -e autobuild/subpkgs ]
then

gen_control

touch abdist/DEBIAN/postinst
chmod 755 abdist/DEBIAN/postinst

touch abdist/DEBIAN/prerm
chmod 755 abdist/DEBIAN/prerm


alternative(){
	while [ "x$1" != "x" ]
	do
		echo "update-alternatives --install $1 `basename $1` $2" >> abdist/DEBIAN/postinst
		echo "update-alternatives --remove `basename $1` $1" >> abdist/DEBIAM/postrm
}

dpkg -b abdist && dpkg -i abdist.deb

fi
