#! /bin/bash
export ABPF=/usr
export ABLE=$ABPF/lib/autobuild
export ARCH=amd64
export MTER="Packager <noboby@whatsoever.com>"
# the author... But maybe we should make it more generic right?

export DPKGDEBFLAGS="-Zxz -z9"

# programs

if [ "x$PYTHON" = "x" ]
then
	export PYTHON=/usr/bin/python
fi

if [ -e $ABLE/functions ]
then
	. $ABLE/functions
else
	# default defines
	dpkg_getver(){
#		dpkg -l $1 | grep ^ii | cut -c 5- | cut -d " " -f 1
		COLUMNS=1 dpkg -l $1 | grep ^ii | cut -c 20- | cut -d " " -f 1
	}
	detect_type(){
		if [ -e autobuild/build ]
                then
                        echo "self"
		elif [ -e configure ]
		then
			echo "autotools"
		elif [ -e CMakeLists.txt ]
		then
			echo "cmake"
		elif [ -e autobuild/build ]
		then
			echo "self"
                elif [ -e SConstruct ]
                then
                        echo "scons"
                elif [ -e setup.py ]
                then
                        echo "python"
		elif [ -e Makefile.PL ]
		then
			echo "perl"
		else
			echo "unsupported"
		fi
	}
	autobuild_autotools(){
		SRCDIR=`pwd`
		if [ "x$ABSHADOW" = "x" ] 
		then
			mkdir -p build &&
			cd build
		else 
			true
		fi && 
		$SRCDIR/configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --libexecdir=/usr/lib/$PKGNAME $AUTOTOOLS_AFTER && 
		make $ABMK $MAKE_AFTER && 
		make DESTDIR=$SRCDIR/abdist $MAKE_AFTER install && 
		if [ "x$ABSHADOW" = "x" ] 
		then 
			cd ..
		else
			true
		fi
	}
	autobuild_cmake(){
                mkdir -p build && 
		cd build && 
		cmake .. -DCMAKE_INSTALL_PREFIX=/usr $CMAKE_AFTER && 
		make $ABMK $MAKE_AFTER && 
		make DESTDIR=`pwd`/../abdist $MAKE_AFTER install && 
		cd ..
        }
	autobuild_self(){
		bash `pwd`/autobuild/build
	}
	autobuild_scons(){
		scons --prefix=/usr --install-sandbox=`pwd`/abdist install
	}
	autobuild_python(){
		$PYTHON setup.py bdist &&
		cd dist &&
		tar xvf *.tar.* &&
		rm *.tar.* &&
		cd .. &&
		mv dist abdist
	}
	autobuild_perl(){
		perl Makefile.PL && make && make DESTDIR=`pwd`/abdist install
	}
	gendep(){
		FIRST=1
		for i in $PKGDEP
		do
			[ "$FIRST" != "1" ] && printf ", "
			[ "$FIRST" = "1" ] && FIRST=0
			if [ "x`echo $i | cut -d '|' -f 1`" = "x$i" ]
			then
				printf "$i (>= `dpkg_getver $i`)"
			else
				printf "$i"
			fi
		done
	}
	genrecom(){
		FIRST=1
		for i in $PKGRECOM
		do
			[ "$FIRST" != "1" ] && printf ", "
			[ "$FIRST" = "1" ] && FIRST=0
			printf "$i"
		done
	}
	genrep(){
		FIRST=1
		for i in $PKGREP
		do
			[ "$FIRST" != "1" ] && printf ", "
			[ "$FIRST" = "1" ] && FIRST=0
			printf "$i"
		done
	}
        genconfl(){
                FIRST=1
                for i in $PKGCONFL
                do
                        [ "$FIRST" != "1" ] && printf ", "
                        [ "$FIRST" = "1" ] && FIRST=0
                        printf "$i"
                done    
        }
        genprov(){
                FIRST=1
                for i in $PKGPROV
                do
                        [ "$FIRST" != "1" ] && printf ", "
                        [ "$FIRST" = "1" ] && FIRST=0
                        printf "$i"
                done    
        }
	gen_control(){
		mkdir -p abdist/DEBIAN && 
		echo "Package: $PKGNAME" > abdist/DEBIAN/control && 
		echo "Version: $PKGVER" >> abdist/DEBIAN/control && 
		echo "Architecture: $ARCH" >> abdist/DEBIAN/control && 
		( ( [ "x$PKGSEC" != "x" ] && echo "Section: $PKGSEC" >> abdist/DEBIAN/control ) || true ) && 
		echo "Maintainer: $MTER" >> abdist/DEBIAN/control &&
		echo "Installed-Size: `du -s abdist | cut -f 1`" >> abdist/DEBIAN/control && 
		echo "Description: $PKGDES" >> abdist/DEBIAN/control && 
		if [ "x$PKGDEP" != "x" ]
		then 
			echo "Depends: `gendep`" >> abdist/DEBIAN/control
		else
			true
		fi &&
		if [ "x$PKGRECOM" != "x" ]
		then 
			echo "Recommends: `genrecom`" >> abdist/DEBIAN/control
		else
			true
		fi &&
		if [ "x$PKGREP" != "x" ]
		then 
			echo "Replaces: `genrep`" >> abdist/DEBIAN/control
		else
			true
		fi
		if [ "x$PKGCONFL" != "x" ]
                then
                        echo "Conflicts: `genconfl`" >> abdist/DEBIAN/control
                else
                        true
                fi
                if [ "x$PKGPROV" != "x" ]
                then
                        echo "Provides: `genprov`" >> abdist/DEBIAN/control
                else
                        true
                fi
	}
fi

if [ ! -d autobuild ]
then
	echo No autobuild directory ^o^
	# what's the point for the emotion character...
	exit 1
fi

if [ -e autobuild/defines ]
then
	. autobuild/defines
else
	echo "No autobuild/defines :-("
	exit 1
fi

# get necessary dependencies defined in define before build
# BUILDDEP+PKGDEP=***REAL*** Needed stuff.
if dpkg -l $BUILDDEP $PKGDEP
then
        true
else
        apt-get update 
        apt-get install $BUILDDEP $PKGDEP
fi

if [ "x$ABTYPE" = "x" ]
then
	export ABTYPE="`detect_type`"
fi

if [ -e autobuild/patch ]
then
	if [ ! -e .patch ]
	then
		. autobuild/patch
		touch .patch
	fi
fi

if autobuild_$ABTYPE
then
	:
else
	echo "Build failed..."
	exit 1
fi

if [ ! -d abdist ]
then
	echo No abdist ^o^
	exit 1
fi

if [ -d autobuild/override ]
then
	cp -r --preserve=all autobuild/override/* abdist
fi

if [ -e autobuild/beyond ]
then
	. autobuild/beyond
fi

# Begin plugins

# remove dir

rm -f abdist/usr/share/info/dir
rm -f abdist/usr/info/dir

# End plugins

if [ ! -e autobuild/subpkgs ]
then

gen_control

touch abdist/DEBIAN/postinst
chmod 755 abdist/DEBIAN/postinst

touch abdist/DEBIAN/prerm
chmod 755 abdist/DEBIAN/prerm


alternative(){
	while [ "x$1" != "x" ]
	do
		echo "update-alternatives --install $1 `basename $1` $2 $3 " >> abdist/DEBIAN/postinst
		echo "update-alternatives --remove `basename $1` $2" >> abdist/DEBIAN/prerm
		shift
		shift
		shift
	done
}

if [ -e autobuild/alternatives ]
then
	. autobuild/alternatives
fi

chmod a-s abdist/DEBIAN

for i in `find abdist`
do
	if [ -u $i ]
	then
		chown root:root $i
		chmod u+s $i
	else
		chown root:root $i
	fi
done

if [ -e abdist ] 
then
if [ "x$ABSTRIP" != "xn" ]
then
	strip --strip-unneeded --strip-debug `find abdist/opt/{bin,sbin}`
	strip --strip-debug `find abdist/opt/*/{lib,lib64}`
	strip --strip-unneeded --strip-debug `find abdist/{bin,sbin,usr/sbin,usr/bin}`
	strip --strip-debug `find abdist/{lib,lib64,usr/lib,usr/lib64}`
fi
else
	echo "You are not supposed to reach here right?"
	echo "And there are nothing to strip, YEAH!!!"
fi

echo "Leaving some useful info for the packager after you..."
echo "$SRCLINK" > autobuild/source-package-link

dpkg-deb $DPKGDEBFLAGS -b abdist && dpkg -i abdist.deb

fi
