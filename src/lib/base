#!/bin/bash
# autobuild functions, shebang for syntax.
shopt -s extglob expand_aliases nullglob
readonly true=1 false=0
# misc functions
returns(){ return $1; }
commaprint(){
	: ${PM_COMMA=, }
	local FIRST=true i
	for i; do
		! $FIRST && echo -n "$PM_COMMA" || FIRST=false
		echo -n $i;
	done
}
varcheck(){	# is it empty?
	declare -gn vchk
	local ret=0
	for vchk; do [ -z "$vchk" ] && ret=1 && break; done
	declare -g +n vchk # Say its name
	return $ret
}
dumparg(){ for i; do printf '%q ' "$i"; done; }
_ab_rsor(){ for i; do [[ -e "$i" ]] && . "$i"; done; }
_ab_plug(){ for i; do _ab_rsor $ABLE/plugin/{,$ARCH_}$i_*.sh; done; }
bool(){ case "$1" in [yY]|[tT]|1|[tT][rR][uU][eE]) return 0; esac; return 1; }
# array_divide <out>arr_name DELIM args[] -> stdout: divide pos, arr_name=args
array_divide(){
	[ "$1" ] || return 2
	declare -n arr="$1"
	local delim="${2---}" idx i
	shift 2
	for i; do
		arr+=("$i")
		[ "$i" = "$delim" ] && echo $idx
		((++idx))
	done
}


# msg funcs like in ab3
warn(){ echo -e "(WW)\t$*" >&2; }

# build functions
build_self(){
	. $SRCDIR/autobuild/build
}
build_autotools(){
	[ -z "$ABSHADOW" ] && mkdir -p build && cd build
	$SRCDIR/${configure} --prefix=/usr --sysconfdir=/etc --localstatedir=/var --libexecdir=/usr/lib/$PKGNAME $AUTOTOOLS_AFTER &&
	make $ABMK $MAKE_AFTER &&
	make DESTDIR=$PKGDIR $MAKE_AFTER install
}
build_cmake(){
	[ -z "$ABSHADOW" ] && mkdir -p build && cd build
	cmake "$SRCDIR" -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release $CMAKE_AFTER &&
	make $ABMK $MAKE_AFTER &&
	make DESTDIR=$PKGDIR $MAKE_AFTER install
}
build_perl(){
	perl Makefile.PL && make && make DESTDIR=$PKGDIR install
}
build_python(){
	$PYTHON setup.py bdist &&
	cd dist &&
	tar xvf *.tar.* &&
	rm *.tar.* &&
	cd .. &&
	mv dist "$PKGDIR"
}
build_qtproject(){
	# qt5 packages: please use PATH="/usr/lib/qt5/bin:$PATH" in defines
	qmake && make $ABMK
}

# BUILD SUPL
detect_type(){
	if [ -e autobuild/build ]
	then
		echo "self"
	elif [ -e configure ]
	then
		echo "autotools"
	elif [ -e CMakeLists.txt ]
	then
		echo "cmake"
	elif [ -e setup.py ]
	then
		echo "python"
	elif [ -e Makefile.PL ]
	then
		echo "perl"
	elif [ "$(echo *.pro)" != '*.pro' ]
	then
		echo "qtproject"
	else
		echo "unsupported"
	fi
}

# a more precise one
# addalt link name path prio
addalt(){
	echo "update-alternatives --install $(dumparg "$@")" >> abdist/postinst
	echo "update-alternatives --remove $(dumparg "$2" "$3")" >> abdist/prerm
}

# alternative path link prio [path2 link2 prio2 ..]
alternative(){ while [ ! -z "$1" ]; do addalt "$1" "$(basename "$1")" "$2" "$3"; shift 3; done; }

# COMMON PMGR
# ref: PAKMGR.md
_ab_pm='' # package manager spec variables
# genver <pkgspec> -> pkgname[<ver_s><op>verstr<ver_e>]
_ab_pm+="OP_{EQ,LE,GE} VER_{S,E} "
genver(){
	local VER_NONE store IFS ver name
	: ${OP_EQ== } ${OP_LE=<= } ${OP_GE=>= } ${VER_S= (} ${VER_E=)} ${VER_NONE=0}
	if [[ "$1" =~ [\<\>=]= ]]; then			# nameOP[ver] -> name OP_ ver
		IFS="$BASH_REMATCH"	# split string using OP
		store=($1)
		name=${store[0]} ver=${store[2]}
		IFS=${IFS/==/$OP_EQ}	# translate to package manager notation
		IFS=${IFS/<=/$OP_LE}
		IFS=${IFS/>=/$OP_GE}
	elif ((VER_NONE)) || [[ "$1" =~ _$ ]]; then	# name{,_} -> name (e.g. conflicts, ..)
		echo -n "${1%_}"; return;
	else name=$1 IFS="$OP_GE"			# name -> name OP_GE getver
	fi
	echo -n "$name$VER_S$IFS${ver=$(getver "$1")}$VER_E"
}
# depcom: Turns "$@" into a comma seperated list of deps.
_ab_pm+="PM_{ALT,DELIM,COMMA} VER_NONE "
depcom(){
	: ${PM_ALT=1} ${PM_DELIM= | }
	local IFS=\| dep pkg i cnt=0	# cnt_depcom: dep comma pos
	for i; do
		dep=($i)
		mkcomma
		_deparse
	done
}
_deparse(){
	local cnt=0			# cnt__deparse: dep delim pos
	if (( !PM_ALT && ${#dep[@]}>1 )); then
		warn "$ABPM doesn't support dependency alternative listing.\n\t" \
			"Using first dependency: $dep."
		genver ${dep[0]}; return;
	fi
	for pkg in ${dep[@]}; do
		PM_COMMA="$PM_DELIM" mkcomma
		genver $pkg
	done
}
# mkcomma: makes a comma or something else ($PM_COMMA in current context).
mkcomma(){ ((cnt++)) && echo -n "${PM_COMMA=, }"; }

# layout
archivedir(){
	local i
	for i in {lib,}{a..z} {0..9} _unknown; do [[ "$1" = $i* ]] && break; done
	echo "$i"
}